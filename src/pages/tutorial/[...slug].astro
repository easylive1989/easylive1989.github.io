---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import type { Article } from '../../types';
import { processMarkdownContent, formatDate } from '../../utils/markdown';
import articlesData from '../../../public/articles.json';

export async function getStaticPaths() {
    const data = articlesData as any;
    const tutorialSeries = data.tutorialSeries || [];

    const paths: any[] = [];

    tutorialSeries.forEach((series: any) => {
        series.articles.forEach((article: Article) => {
            paths.push({
                params: {
                    slug: `${series.name}/${article.id}`
                },
                props: {
                    article,
                    seriesName: series.name
                },
            });
        });
    });

    return paths;
}

const { article, seriesName } = Astro.props as { article: Article; seriesName: string };

// Process markdown content with tutorial series support
const processedContent = processMarkdownContent(article.content || '', article, true, seriesName);
---

<BaseLayout title={`${article.title} - 保羅軟體開發`} description={article.summary}>
    <Header />

    <main>
        <div class="container">
            <div style="max-width: 1200px; margin: 0 auto;">
                <a href={`/series/${encodeURIComponent(seriesName)}`} class="nav-button" style="display: inline-flex; align-items: center; gap: 8px; margin-bottom: 20px; text-decoration: none;">
                    ← 返回{seriesName}
                </a>

                <div class="article-detail-header">
                    <h1 class="article-detail-title">{article.title}</h1>
                    <div class="article-detail-meta">
                        <span>{seriesName}</span>
                    </div>
                </div>

                <div class="article-detail-content" id="article-content">
                    <!-- Content will be rendered here -->
                </div>
            </div>
        </div>
    </main>

    <Footer />

    <script define:vars={{ processedContent }}>
        // Use marked.js to render markdown
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
        script.onload = () => {
            const contentEl = document.getElementById('article-content');
            if (contentEl && window.marked) {
                contentEl.innerHTML = window.marked.parse(processedContent);
            }
        };
        document.head.appendChild(script);
    </script>
</BaseLayout>
